{
  "client/ClientLogic.Client.html": {
    "href": "client/ClientLogic.Client.html",
    "title": "Class Client | efcore-unity-cross-protocol-study",
    "keywords": "Class Client Inheritance object Object Component Behaviour MonoBehaviour Client Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) UnityEngine.MonoBehaviour.StartCoroutine(string, object) UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StartCoroutine_Auto(System.Collections.IEnumerator) UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) UnityEngine.MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled UnityEngine.Component.GetComponent(System.Type) Component.GetComponent<T>() UnityEngine.Component.TryGetComponent(System.Type, out UnityEngine.Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) UnityEngine.Component.GetComponentInChildren(System.Type, bool) UnityEngine.Component.GetComponentInChildren(System.Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() UnityEngine.Component.GetComponentsInChildren(System.Type, bool) UnityEngine.Component.GetComponentsInChildren(System.Type) UnityEngine.Component.GetComponentsInChildren<T>(bool) UnityEngine.Component.GetComponentsInChildren<T>(bool, System.Collections.Generic.List<T>) Component.GetComponentsInChildren<T>() UnityEngine.Component.GetComponentsInChildren<T>(System.Collections.Generic.List<T>) UnityEngine.Component.GetComponentInParent(System.Type, bool) UnityEngine.Component.GetComponentInParent(System.Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() UnityEngine.Component.GetComponentsInParent(System.Type, bool) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(bool) UnityEngine.Component.GetComponentsInParent<T>(bool, System.Collections.Generic.List<T>) Component.GetComponentsInParent<T>() UnityEngine.Component.GetComponents(System.Type) UnityEngine.Component.GetComponents(System.Type, System.Collections.Generic.List<UnityEngine.Component>) UnityEngine.Component.GetComponents<T>(System.Collections.Generic.List<T>) Component.GetComponents<T>() Component.CompareTag(string) UnityEngine.Component.SendMessageUpwards(string, object, UnityEngine.SendMessageOptions) Component.SendMessageUpwards(string, object) UnityEngine.Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) UnityEngine.Component.SendMessage(string, object) UnityEngine.Component.SendMessage(string) UnityEngine.Component.SendMessage(string, object, UnityEngine.SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(string, object) UnityEngine.Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) Object.Instantiate(Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, bool) Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, bool) Object.Destroy(Object, float) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, bool) Object.DestroyImmediate(Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfType(System.Type, bool) UnityEngine.Object.FindObjectsByType(System.Type, UnityEngine.FindObjectsSortMode) UnityEngine.Object.FindObjectsByType(System.Type, UnityEngine.FindObjectsInactive, UnityEngine.FindObjectsSortMode) Object.DontDestroyOnLoad(Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, float) Object.DestroyObject(Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.FindFirstObjectByType(System.Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) UnityEngine.Object.FindAnyObjectByType(System.Type, UnityEngine.FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ClientLogic Assembly: ClientLogic.dll Syntax public class Client : MonoBehaviour Fields | Improve this Doc View Source newUserLevel ClientLogic.Client.RegisterUser 에서 level에 사용 할 정보 Information to use for level in ClientLogic.Client.RegisterUser Declaration public int newUserLevel Field Value Type Description int | Improve this Doc View Source newUserName ClientLogic.Client.RegisterUser 에서 name에 사용 할 정보 Information to use for name in ClientLogic.Client.RegisterUser Declaration public string newUserName Field Value Type Description string | Improve this Doc View Source newUserRandomItemCount ClientLogic.Client.RegisterUser 에서 itemCount에 사용 할 정보 Information to use for itemCount in ClientLogic.Client.RegisterUser Declaration [Range(0, 20)] public int newUserRandomItemCount Field Value Type Description int | Improve this Doc View Source targetUserName ClientLogic.Client.GetUser_WithExtension 또는 ClientLogic.Client.GetUser_WithWrapperType 에서 name에 사용 할 정보 Information to use for name in ClientLogic.Client.GetUser_WithExtension or ClientLogic.Client.GetUser_WithWrapperType Declaration public string targetUserName Field Value Type Description string Properties | Improve this Doc View Source serverUrl ServerApp의 주소 Address of ServerApp Declaration public string serverUrl { get; } Property Value Type Description string"
  },
  "client/ClientLogic.DataLibExtensions.html": {
    "href": "client/ClientLogic.DataLibExtensions.html",
    "title": "Namespace ClientLogic.DataLibExtensions | efcore-unity-cross-protocol-study",
    "keywords": "Namespace ClientLogic.DataLibExtensions Classes InventoryClient 확장 메서드 대신 데이터 타입 클래스로부터 상속받아 추가 기능을 구현한 Inventory의 데이터 클래스 Data class of Inventory that implements additional functions by inheriting from data type class instead of extension method InventoryItemArrayExtensions Inventory 데이터에서 SQLite가 배열을 지원하지 않는 것을 보조하기 위한 확장 클래스 An extension class to assist with SQLite's lack of support for arrays in Inventory data."
  },
  "client/ClientLogic.DataLibExtensions.InventoryClient.html": {
    "href": "client/ClientLogic.DataLibExtensions.InventoryClient.html",
    "title": "Class InventoryClient | efcore-unity-cross-protocol-study",
    "keywords": "Class InventoryClient 확장 메서드 대신 데이터 타입 클래스로부터 상속받아 추가 기능을 구현한 Inventory의 데이터 클래스 Data class of Inventory that implements additional functions by inheriting from data type class instead of extension method Inheritance object Inventory InventoryClient Inherited Members Inventory.ID object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ClientLogic.DataLibExtensions Assembly: ClientLogic.dll Syntax public class InventoryClient : Inventory Remarks 서버에서 사용하는 동일 타입의 데이터 클래스는 이를 모르기 때문에, 새로 정의하는 필드 및 속성값은 필요한 경우가 아니라면 반드시 직렬화가 되지 않도록 만들어야 합니다. 자세한 내용은 ClientLogic.Client.RegisterUser의 주석을 확인하세요. Since the data classes of the same type used by the server do not know this, so newly defined field and property values must be made non-serializable unless necessary. Check comments on ClientLogic.Client.RegisterUser for details. Constructors | Improve this Doc View Source InventoryClient(Inventory) 약속한 데이터 타입 Inventory으로부터 데이터를 적용합니다. Apply from the promised data type Inventory. Declaration public InventoryClient(Inventory source) Parameters Type Name Description Inventory source 원본 데이터 / Source data Remarks 서버에서 사용하는 동일 타입의 데이터 클래스는 이를 모르기 때문에, 새로 정의하는 필드 및 속성값은 필요한 경우가 아니라면 반드시 직렬화가 되지 않도록 만들어야 합니다. 자세한 내용은 ClientLogic.Client.RegisterUser의 주석을 확인하세요. Since the data classes of the same type used by the server do not know this, so newly defined field and property values must be made non-serializable unless necessary. Check comments on ClientLogic.Client.RegisterUser for details. Properties | Improve this Doc View Source Items Items 속성을 JSON 직렬화/역직렬화로 재정의한 속성입니다. Overriding the Items property to JSON serialize/deserialize. Declaration [JsonIgnore] public string[] Items { get; set; } Property Value Type Description string[] Items에서 파싱된 string[]값 string[] value parsed from Items Remarks https://www.newtonsoft.com/json/help/html/SerializationCallbacks.htm Extension Methods InventoryItemArrayExtensions.GetItems(Inventory) InventoryItemArrayExtensions.SetItems(Inventory, string[])"
  },
  "client/ClientLogic.DataLibExtensions.InventoryItemArrayExtensions.html": {
    "href": "client/ClientLogic.DataLibExtensions.InventoryItemArrayExtensions.html",
    "title": "Class InventoryItemArrayExtensions | efcore-unity-cross-protocol-study",
    "keywords": "Class InventoryItemArrayExtensions Inventory 데이터에서 SQLite가 배열을 지원하지 않는 것을 보조하기 위한 확장 클래스 An extension class to assist with SQLite's lack of support for arrays in Inventory data. Inheritance object InventoryItemArrayExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ClientLogic.DataLibExtensions Assembly: ClientLogic.dll Syntax public static class InventoryItemArrayExtensions Methods | Improve this Doc View Source GetItems(Inventory) Items 문자열을 JSON 배열로 파싱하여 문자열 배열을 반환합니다. Parses the Items string into a JSON array and returns an array of strings. Declaration public static string[] GetItems(this Inventory context) Parameters Type Name Description Inventory context 확장 메서드 대상 / Extension method target Returns Type Description string[] Items를 string[]로 파싱한 값 string[] that parsed from Items | Improve this Doc View Source SetItems(Inventory, string[]) string[]배열 값을 JSON으로 변환하여 Items에 담습니다. Convert the string[] array values to JSON and put them in Items. Declaration public static void SetItems(this Inventory context, string[] value) Parameters Type Name Description Inventory context 확장 메서드 대상 / Extension method target string[] value Items에 지정하려는 배열 값 / Array value that assign to Items"
  },
  "client/ClientLogic.html": {
    "href": "client/ClientLogic.html",
    "title": "Namespace ClientLogic | efcore-unity-cross-protocol-study",
    "keywords": "Namespace ClientLogic Classes Client"
  },
  "data/DataLib.html": {
    "href": "data/DataLib.html",
    "title": "Namespace DataLib | efcore-unity-cross-protocol-study",
    "keywords": "Namespace DataLib Classes Inventory 인벤토리 데이터 Inventory data UserData 유저 데이터 Enums RegisterUserResults 사용자 등록 응답 타입 User registration response type"
  },
  "data/DataLib.Inventory.html": {
    "href": "data/DataLib.Inventory.html",
    "title": "Class Inventory | efcore-unity-cross-protocol-study",
    "keywords": "Class Inventory 인벤토리 데이터 Inventory data Inheritance object Inventory Namespace: DataLib Assembly: DataLib.dll Syntax public class Inventory Properties | Improve this Doc View Source ID 테이블 고유 ID Table unique id Declaration [Key] public int ID { get; set; } Property Value Type Description int ID값 | Improve this Doc View Source Items 인벤토리 아이템 ID 데이터 Inventory item ID data Declaration public string? Items { get; set; } Property Value Type Description string 아이템 ID 문자열 배열 Array of item id strings in JSON Remarks 스터디로 활용했던 DB 환경이 SQLite이기 때문에 배열 타입을 활용하지 못했습니다. 다른 DB 환경(예를 들어 pgsql 등)의 경우에는 배열 타입을 사용할 수도 있습니다. DB environment used for the study was SQLite, so the array type could not be used. For other DB environments (e.g. pgsql) you can may use array types."
  },
  "data/DataLib.RegisterUserResults.html": {
    "href": "data/DataLib.RegisterUserResults.html",
    "title": "Enum RegisterUserResults | efcore-unity-cross-protocol-study",
    "keywords": "Enum RegisterUserResults 사용자 등록 응답 타입 User registration response type Namespace: DataLib Assembly: DataLib.dll Syntax public enum RegisterUserResults Fields Name Description DuplicatedName 중복 닉네임 duplicate nickname NotValidData 등록하려는 데이터에 문제가 있음 There's a problem with the data that trying to register Success 등록 성공 registration success"
  },
  "data/DataLib.UserData.html": {
    "href": "data/DataLib.UserData.html",
    "title": "Class UserData | efcore-unity-cross-protocol-study",
    "keywords": "Class UserData 유저 데이터 Inheritance object UserData Namespace: DataLib Assembly: DataLib.dll Syntax public class UserData Properties | Improve this Doc View Source Inventory 유저 인벤토리 정보 User inventory information Declaration public Inventory? Inventory { get; set; } Property Value Type Description Inventory Inventory 테이블 내에 참조된 열 Referenced row in Inventory table | Improve this Doc View Source Level 레벨 Level Declaration public uint Level { get; set; } Property Value Type Description uint 유저 레벨값 User level value | Improve this Doc View Source Name 닉네임 Nickname Declaration [Key] public virtual string? Name { get; set; } Property Value Type Description string 닉네임 문자열 Nickname string"
  },
  "index.html": {
    "href": "index.html",
    "title": "ASP.NET Core의 EF Core와 Unity 양방향 데이터 처리 스터디 | efcore-unity-cross-protocol-study",
    "keywords": "ASP.NET Core의 EF Core와 Unity 양방향 데이터 처리 스터디 📒블로그 글 💾GitHub 이 저장소는 제 지인과 함께 데이터 관리를 위한 서버 백엔드 스터디를 위해 공부한 내용입니다. 서버와 클라이언트가 서로 약속한 데이터 규약 준비 => DataLib 프로젝트 ASP.NET Core에서 EF core 쓰는 법 => ServerApp 프로젝트 DataLib을 활용해 DB 테이블 구축 연습이라 DB를 sqlite로 사용했기 때문에 배열을 DB에 넣을 수 없었음 유니티(클라이언트)에서 DataLib을 가져와 서버와 REST API 통신 => UnityClient DataLib에서 dotnet build 명령을 내리면 유니티 에셋 폴더에 빌드 파일을 복사하도록 지시 서버와 통신하는 것을 확인 ASP.NET Core's EF Core and Unity Bidirectional Data Processing Study 📒Blog post (Korean) 💾GitHub This repository is what I studied for a server backend study for data management with my acquaintances. Prepare the data protocols promised by the server and client => DataLib project How to use EF core in ASP.NET Core => ServerApp project Build DB table using DataLib I couldn't put the array into the DB because I used the DB as sqlite for practice. Import DataLib from Unity (client) and communicate REST API with server => UnityClient Commanding dotnet build in DataLib tells it to copy build files to the Unity Assets folder. Check communication with the server"
  },
  "server/ServerApp.Database.DataLibContext.html": {
    "href": "server/ServerApp.Database.DataLibContext.html",
    "title": "Class DataLibContext | efcore-unity-cross-protocol-study",
    "keywords": "Class DataLibContext DataLib 모델 라이브러리를 기반으로 하는 EF Core 데이터베이스 컨텍스트 클래스 EF Core database context class based on DataLib model library Inheritance object DbContext DataLibContext Implements IInfrastructure<IServiceProvider> Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies Microsoft.EntityFrameworkCore.Internal.IDbSetCache Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) Microsoft.EntityFrameworkCore.DbContext.ToString() Microsoft.EntityFrameworkCore.DbContext.Equals(object) Microsoft.EntityFrameworkCore.DbContext.GetHashCode() DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ServerApp.Database Assembly: ServerApp.dll Syntax public class DataLibContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Constructors | Improve this Doc View Source DataLibContext(DbContextOptions<DataLibContext>) Declaration public DataLibContext(DbContextOptions<DataLibContext> options) Parameters Type Name Description DbContextOptions<DataLibContext> options Properties | Improve this Doc View Source Users UserData 테이블 Table of UserData Declaration public DbSet<UserData>? Users { get; set; } Property Value Type Description DbSet<UserData> Methods | Improve this Doc View Source OnConfiguring(DbContextOptionsBuilder) Declaration protected override void OnConfiguring(DbContextOptionsBuilder builder) Parameters Type Name Description DbContextOptionsBuilder builder Overrides DbContext.OnConfiguring(DbContextOptionsBuilder) | Improve this Doc View Source OnModelCreating(ModelBuilder) Declaration protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder Overrides DbContext.OnModelCreating(ModelBuilder) Implements Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<T> Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies Microsoft.EntityFrameworkCore.Internal.IDbSetCache Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable Microsoft.EntityFrameworkCore.Infrastructure.IResettableService System.IDisposable System.IAsyncDisposable"
  },
  "server/ServerApp.Database.html": {
    "href": "server/ServerApp.Database.html",
    "title": "Namespace ServerApp.Database | efcore-unity-cross-protocol-study",
    "keywords": "Namespace ServerApp.Database Classes DataLibContext DataLib 모델 라이브러리를 기반으로 하는 EF Core 데이터베이스 컨텍스트 클래스 EF Core database context class based on DataLib model library"
  },
  "server/ServerApp.html": {
    "href": "server/ServerApp.html",
    "title": "Namespace ServerApp | efcore-unity-cross-protocol-study",
    "keywords": "Namespace ServerApp Classes Program"
  },
  "server/ServerApp.Program.html": {
    "href": "server/ServerApp.Program.html",
    "title": "Class Program | efcore-unity-cross-protocol-study",
    "keywords": "Class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ServerApp Assembly: ServerApp.dll Syntax public static class Program Methods | Improve this Doc View Source Main(string[]) Declaration public static void Main(string[] args) Parameters Type Name Description string[] args"
  }
}