{
  "client/ClientLogic.Client.html": {
    "href": "client/ClientLogic.Client.html",
    "title": "Class Client | efcore-unity-cross-protocol-study",
    "keywords": "Class Client Inheritance object Client Namespace: ClientLogic Assembly: cs.temp.dll.dll Syntax public class Client : MonoBehaviour Fields currentRequest Declaration Coroutine currentRequest Field Value Type Description Coroutine newUserLevel RegisterUser() 에서 level에 사용 할 정보 Information to use for level in RegisterUser() Declaration public int newUserLevel Field Value Type Description int newUserName RegisterUser() 에서 name에 사용 할 정보 Information to use for name in RegisterUser() Declaration public string newUserName Field Value Type Description string newUserRandomItemCount RegisterUser() 에서 itemCount에 사용 할 정보 Information to use for itemCount in RegisterUser() Declaration [Range] public int newUserRandomItemCount Field Value Type Description int targetUserName GetUser_WithExtension() 또는 GetUser_WithWrapperType() 에서 name에 사용 할 정보 Information to use for name in GetUser_WithExtension() or GetUser_WithWrapperType() Declaration public string targetUserName Field Value Type Description string Properties serverUrl ServerApp의 주소 Address of ServerApp Declaration public string serverUrl { get; } Property Value Type Description string Methods GetAllUsers_WithExtension() 모든 사용자 정보를 불러온 후, 사용자 정보와 확장 메서드를 통해 사용자의 인벤토리 데이터까지 표시합니다. After fetching all user information, display the user information and even the user's inventory data through extension methods. Declaration void GetAllUsers_WithExtension() GetAllUsers_WithWrapperType() 모든 사용자 정보를 불러온 후, 사용자 정보와 InventoryClient 타입을 활용해 사용자의 인벤토리 데이터까지 표시합니다. After fetching all user information, display the user information and using InventoryClient type to display the user's inventory data. Declaration void GetAllUsers_WithWrapperType() GetRequestAsync<T>(string, Action<T>, Action<T>) 지정한 url에 GET 요청을 보냅니다. Sends a GET request to the specified url. Declaration IEnumerator GetRequestAsync<T>(string url, Action<T> onSuccess, Action<T> onError = null) Parameters Type Name Description string url GET 요청을 보낼 주소 Address to send GET requests to Action<T> onSuccess 처리 성공 시 호출할 메서드 Method to be called on successful processing Action<T> onError 처리 실패 시 호출할 메서드 Method to be called in case of processing failure Returns Type Description IEnumerator Type Parameters Name Description T 서버 응답으로 약속한 데이터 타입 (서버 앱과 DataLib 어셈블리 하위 유형만 약속함) Data types promised in server response (promised only by server app and DataLib assembly subtype) GetUser_WithExtension() 특정한 닉네임(targetUserName)을 가진 사용자의 정보를 불러온 후, 사용자 정보와 확장 메서드를 통해 사용자의 인벤토리 데이터까지 표시합니다. After fetching the information of a user with a specific nickname (targetUserName), display the user information and even the user's inventory data through extension methods. Declaration void GetUser_WithExtension() GetUser_WithWrapperType() 특정한 닉네임(targetUserName)을 가진 사용자의 정보를 불러온 후, 사용자 정보와 InventoryClient 타입을 활용해 사용자의 인벤토리 데이터까지 표시합니다. After fetching the information of a user with a specific nickname (targetUserName), display the user information and using InventoryClient type to display the user's inventory data. Declaration void GetUser_WithWrapperType() IsRequestRunning() 요청을 처리하고 있는 지 여부입니다. Whether the request is being processed. Declaration bool IsRequestRunning() Returns Type Description bool 요청 처리 중인 지 여부 Whether the request is being processed OnRegisterUserResult(RegisterUserResults?) 서버 라우팅 경로 /register 에서 응답한 결과를 표시합니다. Declaration void OnRegisterUserResult(RegisterUserResults? results) Parameters Type Name Description RegisterUserResults? results RegisterUser() [name = newUserName, level = newUserLevel, itemCount = newUserRandomItemCount] 정보를 서버에 넘겨주어 사용자를 등록합니다. Register the user by passing the information [name = newUserName, level = newUserLevel, itemCount = newUserRandomItemCount] to the server. Declaration void RegisterUser() Remarks 서버에 정보를 넘겨주는 경우에는 반드시 POST로 요청하세요. 헤더에는 아래와 같은 값이 들어가며, 서버 어플리케이션에서 구현한 요구사항에 따라 헤더가 달라질 수 있습니다. 'Accept' = 'application/json' 'Content-Type' = 'application/json' 그런 뒤, body에 DataLib에서 역직렬화가 가능한 JSON으로 직렬화를 하여 보내면 됩니다. DataLib에서 정의하는 데이터 유형이 바로 서버(ASP.NET Core/EF Core)와 클라이언트(Unity) 간의 약속이기 때문입니다. When passing information to the server, be sure to make a POST request. The header contains the following values. 'Accept' = 'application/json' 'Content-Type' = 'application/json' After that, serialize the body to JSON that can be deserialized in DataLib and send it. That's because the data types that DataLib defines are promises between the server(ASP.NET Core/EF Core) and the client(Unity). 🔗https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-javascript?view=aspnetcore-7.0 서버측 로직은 단순히 빠른 스터디 진행을 위해 REST API를 구체적으로 구현하지 않았습니다. Server side logic does not specifically implement a REST API, simply to speed study progress. ShowAllUsersWithExtension(UserData[]) 확장 메서드 기능(InventoryItemArrayExtensions)으로 사용자들의 정보와 인벤토리 데이터를 표시하는 사용자 목록을 로그에 남깁니다. Log a list of users displaying it's info and inventory with extension method(InventoryItemArrayExtensions) function. Declaration void ShowAllUsersWithExtension(UserData[] users) Parameters Type Name Description UserData[] users 사용자 목록 List of user information. ShowAllUsersWithWrapperType(UserData[]) 타입 래핑(InventoryClient)으로 사용자들의 정보와 인벤토리 데이터를 표시하는 사용자 목록을 로그에 남깁니다. Log a list of users displaying it's info and inventory data with wrapped type(InventoryClient). Declaration void ShowAllUsersWithWrapperType(UserData[] users) Parameters Type Name Description UserData[] users 사용자 목록 List of user information. ShowUserInfoWithExtension(UserData) 확장 메서드 기능(InventoryItemArrayExtensions)으로 사용자 정보와 인벤토리 데이터를 표시하는 사용자 정보를 로그에 남깁니다. Log a user displaying it's info and inventory data with extension method(InventoryItemArrayExtensions) function. Declaration void ShowUserInfoWithExtension(UserData user) Parameters Type Name Description UserData user 사용자 정보 User information ShowUserInfoWithWrapperType(UserData) 타입 래핑(InventoryClient)으로 사용자 정보와 인벤토리 데이터를 표시하는 사용자 정보를 로그에 남깁니다. Log a user displaying it's info and inventory data with wrapped type(InventoryClient). Declaration void ShowUserInfoWithWrapperType(UserData user) Parameters Type Name Description UserData user 사용자 정보 User information TestConversationWrappingType() InventoryClient와 Inventory간 데이터 처리를 통해 DataLib에서 약속한 데이터로 변환할 수 있는지 증명하는 코드입니다. This code proves that data can be converted to the data promised by DataLib through data processing between InventoryClient and Inventory. Declaration void TestConversationWrappingType()"
  },
  "client/ClientLogic.DataLibExtensions.html": {
    "href": "client/ClientLogic.DataLibExtensions.html",
    "title": "Namespace ClientLogic.DataLibExtensions | efcore-unity-cross-protocol-study",
    "keywords": "Namespace ClientLogic.DataLibExtensions Classes InventoryClient 확장 메서드 대신 데이터 타입 클래스로부터 상속받아 추가 기능을 구현한 Inventory의 데이터 클래스 Data class of Inventory that implements additional functions by inheriting from data type class instead of extension method InventoryItemArrayExtensions Inventory 데이터에서 SQLite가 배열을 지원하지 않는 것을 보조하기 위한 확장 클래스 An extension class to assist with SQLite's lack of support for arrays in Inventory data."
  },
  "client/ClientLogic.DataLibExtensions.InventoryClient.html": {
    "href": "client/ClientLogic.DataLibExtensions.InventoryClient.html",
    "title": "Class InventoryClient | efcore-unity-cross-protocol-study",
    "keywords": "Class InventoryClient 확장 메서드 대신 데이터 타입 클래스로부터 상속받아 추가 기능을 구현한 Inventory의 데이터 클래스 Data class of Inventory that implements additional functions by inheriting from data type class instead of extension method Inheritance object InventoryClient Namespace: ClientLogic.DataLibExtensions Assembly: cs.temp.dll.dll Syntax public class InventoryClient : Inventory Remarks 서버에서 사용하는 동일 타입의 데이터 클래스는 이를 모르기 때문에, 새로 정의하는 필드 및 속성값은 필요한 경우가 아니라면 반드시 직렬화가 되지 않도록 만들어야 합니다. 자세한 내용은 RegisterUser()의 주석을 확인하세요. Since the data classes of the same type used by the server do not know this, so newly defined field and property values must be made non-serializable unless necessary. Check comments on RegisterUser() for details. Constructors InventoryClient(Inventory) 약속한 데이터 타입 Inventory으로부터 데이터를 적용합니다. Apply from the promised data type Inventory. Declaration public InventoryClient(Inventory source) Parameters Type Name Description Inventory source 원본 데이터 / Source data Remarks 서버에서 사용하는 동일 타입의 데이터 클래스는 이를 모르기 때문에, 새로 정의하는 필드 및 속성값은 필요한 경우가 아니라면 반드시 직렬화가 되지 않도록 만들어야 합니다. 자세한 내용은 RegisterUser()의 주석을 확인하세요. Since the data classes of the same type used by the server do not know this, so newly defined field and property values must be made non-serializable unless necessary. Check comments on RegisterUser() for details. Properties Items Items 속성을 JSON 직렬화/역직렬화로 재정의한 속성입니다. Overriding the Items property to JSON serialize/deserialize. Declaration public string[] Items { get; set; } Property Value Type Description string[] Items에서 파싱된 string[]값 string[] value parsed from Items Remarks https://www.newtonsoft.com/json/help/html/SerializationCallbacks.htm Methods OnDeserializedMethod(StreamingContext) Newtonsoft.Json에서 Inventory를 역직렬화 할 때, JSON으로 직렬화 되어있는(약속한 타입) Items 문자열을 DataLib.InventoryClient.Items에 역직렬화하여 넣습니다. Declaration void OnDeserializedMethod(StreamingContext context) Parameters Type Name Description StreamingContext context Remarks 서버에서 사용하는 동일 타입의 데이터 클래스는 이를 모르기 때문에, 새로 정의하는 필드 및 속성값은 필요한 경우가 아니라면 반드시 직렬화가 되지 않도록 만들어야 합니다. 자세한 내용은 RegisterUser()의 주석을 확인하세요. Since the data classes of the same type used by the server do not know this, so newly defined field and property values must be made non-serializable unless necessary. Check comments on RegisterUser() for details. OnSerializingMethod(StreamingContext) Newtonsoft.Json에서 DataLib.InventoryClient를 직렬화 할 때, DataLib.InventoryClient.Items배열을 Items에 직렬화하여 넣습니다. Declaration void OnSerializingMethod(StreamingContext context) Parameters Type Name Description StreamingContext context Remarks 서버에서 사용하는 동일 타입의 데이터 클래스는 이를 모르기 때문에, 새로 정의하는 필드 및 속성값은 필요한 경우가 아니라면 반드시 직렬화가 되지 않도록 만들어야 합니다. 자세한 내용은 RegisterUser()의 주석을 확인하세요. Since the data classes of the same type used by the server do not know this, so newly defined field and property values must be made non-serializable unless necessary. Check comments on RegisterUser() for details."
  },
  "client/ClientLogic.DataLibExtensions.InventoryItemArrayExtensions.html": {
    "href": "client/ClientLogic.DataLibExtensions.InventoryItemArrayExtensions.html",
    "title": "Class InventoryItemArrayExtensions | efcore-unity-cross-protocol-study",
    "keywords": "Class InventoryItemArrayExtensions Inventory 데이터에서 SQLite가 배열을 지원하지 않는 것을 보조하기 위한 확장 클래스 An extension class to assist with SQLite's lack of support for arrays in Inventory data. Inheritance object InventoryItemArrayExtensions Namespace: ClientLogic.DataLibExtensions Assembly: cs.temp.dll.dll Syntax public static class InventoryItemArrayExtensions Methods GetItems(Inventory) Items 문자열을 JSON 배열로 파싱하여 문자열 배열을 반환합니다. Parses the Items string into a JSON array and returns an array of strings. Declaration public static string[] GetItems(this Inventory context) Parameters Type Name Description Inventory context 확장 메서드 대상 / Extension method target Returns Type Description string[] Items를 string[]로 파싱한 값 string[] that parsed from Items SetItems(Inventory, string[]) string[]배열 값을 JSON으로 변환하여 Items에 담습니다. Convert the string[] array values to JSON and put them in Items. Declaration public static void SetItems(this Inventory context, string[] value) Parameters Type Name Description Inventory context 확장 메서드 대상 / Extension method target string[] value Items에 지정하려는 배열 값 / Array value that assign to Items"
  },
  "client/ClientLogic.html": {
    "href": "client/ClientLogic.html",
    "title": "Namespace ClientLogic | efcore-unity-cross-protocol-study",
    "keywords": "Namespace ClientLogic Classes Client"
  },
  "data/DataLib.html": {
    "href": "data/DataLib.html",
    "title": "Namespace DataLib | efcore-unity-cross-protocol-study",
    "keywords": "Namespace DataLib Classes Inventory 인벤토리 데이터 Inventory data UserData 유저 데이터 Enums RegisterUserResults 사용자 등록 응답 타입 User registration response type"
  },
  "data/DataLib.Inventory.html": {
    "href": "data/DataLib.Inventory.html",
    "title": "Class Inventory | efcore-unity-cross-protocol-study",
    "keywords": "Class Inventory 인벤토리 데이터 Inventory data Inheritance object Inventory Namespace: DataLib Assembly: DataLib.dll Syntax public class Inventory Properties ID 테이블 고유 ID Table unique id Declaration [Key] public int ID { get; set; } Property Value Type Description int ID값 Items 인벤토리 아이템 ID 데이터 Inventory item ID data Declaration public string? Items { get; set; } Property Value Type Description string 아이템 ID 문자열 배열 Array of item id strings in JSON Remarks 스터디로 활용했던 DB 환경이 SQLite이기 때문에 배열 타입을 활용하지 못했습니다. 다른 DB 환경(예를 들어 pgsql 등)의 경우에는 배열 타입을 사용할 수도 있습니다. DB environment used for the study was SQLite, so the array type could not be used. For other DB environments (e.g. pgsql) you can may use array types."
  },
  "data/DataLib.RegisterUserResults.html": {
    "href": "data/DataLib.RegisterUserResults.html",
    "title": "Enum RegisterUserResults | efcore-unity-cross-protocol-study",
    "keywords": "Enum RegisterUserResults 사용자 등록 응답 타입 User registration response type Namespace: DataLib Assembly: DataLib.dll Syntax public enum RegisterUserResults Fields Name Description DuplicatedName 중복 닉네임 duplicate nickname NotValidData 등록하려는 데이터에 문제가 있음 There's a problem with the data that trying to register Success 등록 성공 registration success"
  },
  "data/DataLib.UserData.html": {
    "href": "data/DataLib.UserData.html",
    "title": "Class UserData | efcore-unity-cross-protocol-study",
    "keywords": "Class UserData 유저 데이터 Inheritance object UserData Namespace: DataLib Assembly: DataLib.dll Syntax public class UserData Properties Inventory 유저 인벤토리 정보 User inventory information Declaration public Inventory? Inventory { get; set; } Property Value Type Description Inventory Inventory 테이블 내에 참조된 열 Referenced row in Inventory table Level 레벨 Level Declaration public uint Level { get; set; } Property Value Type Description uint 유저 레벨값 User level value Name 닉네임 Nickname Declaration [Key] public virtual string? Name { get; set; } Property Value Type Description string 닉네임 문자열 Nickname string"
  },
  "index.html": {
    "href": "index.html",
    "title": "ASP.NET Core의 EF Core와 Unity 양방향 데이터 처리 스터디 | efcore-unity-cross-protocol-study",
    "keywords": "ASP.NET Core의 EF Core와 Unity 양방향 데이터 처리 스터디 블로그 글 GitHub 이 저장소는 제 지인과 함께 데이터 관리를 위한 서버 백엔드 스터디를 위해 공부한 내용입니다. 서버와 클라이언트가 서로 약속한 데이터 규약 준비 => DataLib 프로젝트 ASP.NET Core에서 EF core 쓰는 법 => ServerApp 프로젝트 DataLib을 활용해 DB 테이블 구축 연습이라 DB를 sqlite로 사용했기 때문에 배열을 DB에 넣을 수 없었음 유니티(클라이언트)에서 DataLib을 가져와 서버와 REST API 통신 => UnityClient DataLib에서 dotnet build 명령을 내리면 유니티 에셋 폴더에 빌드 파일을 복사하도록 지시 서버와 통신하는 것을 확인 ASP.NET Core's EF Core and Unity Bidirectional Data Processing Study Blog post (Korean) GitHub This repository is what I studied for a server backend study for data management with my acquaintances. Prepare the data protocols promised by the server and client => DataLib project How to use EF core in ASP.NET Core => ServerApp project Build DB table using DataLib I couldn't put the array into the DB because I used the DB as sqlite for practice. Import DataLib from Unity (client) and communicate REST API with server => UnityClient Commanding dotnet build in DataLib tells it to copy build files to the Unity Assets folder. Check communication with the server"
  },
  "server/ServerApp.Database.DataLibContext.html": {
    "href": "server/ServerApp.Database.DataLibContext.html",
    "title": "Class DataLibContext | efcore-unity-cross-protocol-study",
    "keywords": "Class DataLibContext DataLib 모델 라이브러리를 기반으로 하는 EF Core 데이터베이스 컨텍스트 클래스 EF Core database context class based on DataLib model library Inheritance object DbContext DataLibContext Namespace: ServerApp.Database Assembly: ServerApp.dll Syntax public class DataLibContext : DbContext Constructors DataLibContext(DbContextOptions<DataLibContext>) Declaration public DataLibContext(DbContextOptions<DataLibContext> options) Parameters Type Name Description DbContextOptions<DataLibContext> options Properties Users UserData 테이블 Table of UserData Declaration public DbSet<UserData>? Users { get; set; } Property Value Type Description DbSet<UserData> Methods OnConfiguring(DbContextOptionsBuilder) Declaration protected override void OnConfiguring(DbContextOptionsBuilder builder) Parameters Type Name Description DbContextOptionsBuilder builder Overrides DbContext.OnConfiguring(DbContextOptionsBuilder) OnModelCreating(ModelBuilder) Declaration protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder Overrides DbContext.OnModelCreating(ModelBuilder)"
  },
  "server/ServerApp.Database.html": {
    "href": "server/ServerApp.Database.html",
    "title": "Namespace ServerApp.Database | efcore-unity-cross-protocol-study",
    "keywords": "Namespace ServerApp.Database Classes DataLibContext DataLib 모델 라이브러리를 기반으로 하는 EF Core 데이터베이스 컨텍스트 클래스 EF Core database context class based on DataLib model library"
  },
  "server/ServerApp.html": {
    "href": "server/ServerApp.html",
    "title": "Namespace ServerApp | efcore-unity-cross-protocol-study",
    "keywords": "Namespace ServerApp Classes Program"
  },
  "server/ServerApp.Program.html": {
    "href": "server/ServerApp.Program.html",
    "title": "Class Program | efcore-unity-cross-protocol-study",
    "keywords": "Class Program Inheritance object Program Namespace: ServerApp Assembly: ServerApp.dll Syntax public static class Program Fields dummyItemsData 더미로 사용할 게임 아이템 데이터입니다. Game item data to be used as a dummy. Declaration static readonly string[] dummyItemsData Field Value Type Description string[] 더미 아이템 목록 List of dummy items Methods GetAllUsers(DataLibContext) 경로(Route) : / 모든 사용자 정보를 가져옵니다. Gets all user information. Declaration static UserData[] GetAllUsers(DataLibContext db) Parameters Type Name Description DataLibContext db 데이터베이스 컨텍스트 Database context Returns Type Description UserData[] 모든 사용자 정보가 담긴 목록 List of users with information GetUserByName(DataLibContext, string) 경로(Route) : /name={name} 특정한 사용자 정보를 가져옵니다. Gets specified user information. Declaration static UserData? GetUserByName(DataLibContext db, string name) Parameters Type Name Description DataLibContext db 데이터베이스 컨텍스트 Database context string name 특정할 닉네임 Specified nickname Returns Type Description UserData 특정한 사용자 정보가 담긴 목록 List of users with information Main(string[]) Declaration public static void Main(string[] args) Parameters Type Name Description string[] args OnRegisterUser(DataLibContext, string, uint, int) 경로(Route) : /register 사용자를 등록합니다. Registers user. Declaration static Task<IResult> OnRegisterUser(DataLibContext db, string name, uint level, int itemCount) Parameters Type Name Description DataLibContext db 데이터베이스 컨텍스트 Database context string name 사용자 닉네임 User nickname uint level 사용자 레벨 User level int itemCount Inventory에 들어갈 더미 아이템 개수 Number of dummy items to fit in Inventory Returns Type Description Task<IResult> 가능한 경우, RegisterUserResults를 반환합니다. If possible, returns RegisterUserResults. TestInventory(int) 랜덤 아이템이 개수만큼 들어간 더미 인벤토리를 생성합니다. Create a dummy inventory containing the number of random items. Declaration static Inventory TestInventory(int itemCount) Parameters Type Name Description int itemCount 더미 아이템 개수 Count of dummy items Returns Type Description Inventory 더미 아이템이 들어간 인벤토리 데이터 Inventory data with dummy items"
  }
}